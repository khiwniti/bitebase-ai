{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///workspace/bitebase-ai/frontend/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\";\n\nimport { cn } from \"../../lib/utils\";\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAKA,MAAM,sBAAQ,uLAAgB,MAC5B,QAAgC;QAA/B,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO;IAC5B,qBACE,yMAAC;QACC,MAAM;QACN,WAAW,IAAA,wIAAE,EACX,wUACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///workspace/bitebase-ai/frontend/src/components/ui/scroll-area.tsx"],"sourcesContent":["import * as React from \"react\";\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\";\n\nimport { cn } from \"../../lib/utils\";\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n));\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 border-t border-t-transparent p-[1px]\",\n      className,\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n));\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;\n\nexport { ScrollArea, ScrollBar };\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AAEA;;;;;AAEA,MAAM,2BAAa,uLAAgB,MAGjC,QAAoC;QAAnC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO;yBAClC,yMAAC,iMAAwB;QACvB,KAAK;QACL,WAAW,IAAA,wIAAE,EAAC,4BAA4B;QACzC,GAAG,KAAK;;0BAET,yMAAC,qMAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,yMAAC;;;;;0BACD,yMAAC,mMAA0B;;;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,iMAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,uLAAgB,CAGhC,QAAoD;QAAnD,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO;yBAClD,yMAAC,gNAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,IAAA,wIAAE,EACX,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,+CACF;QAED,GAAG,KAAK;kBAET,cAAA,yMAAC,4MAAmC;YAAC,WAAU;;;;;;;;;;;;MAjB7C;AAoBN,UAAU,WAAW,GAAG,gNAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///workspace/bitebase-ai/frontend/src/contexts/ReportsContext.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\nimport { \n  RestaurantRequirements, \n  ProductAnalysis, \n  PlaceAnalysis, \n  PriceAnalysis, \n  PromotionAnalysis,\n  ComprehensiveReport,\n  AgentStatus,\n  ChatMessage as SharedChatMessage\n} from '@/shared/types';\nimport { io, Socket } from 'socket.io-client';\n\n// Enhanced types for LangGraph integration\nexport interface LangGraphState {\n  sessionId: string;\n  workflowId?: string;\n  currentNode: string;\n  agentProgress: Record<string, {\n    status: 'pending' | 'running' | 'completed' | 'failed' | 'paused';\n    progress: number;\n    currentTask: string;\n    startTime?: Date;\n    endTime?: Date;\n    error?: string;\n  }>;\n  overallProgress: number;\n  mcpServerStatus: Record<string, {\n    connected: boolean;\n    lastHealthCheck: Date;\n    errorCount: number;\n  }>;\n  errors: Array<{\n    agentId: string;\n    error: string;\n    timestamp: Date;\n    severity: 'low' | 'medium' | 'high' | 'critical';\n  }>;\n}\n\nexport interface EnhancedRestaurantParams {\n  type: string;\n  cuisine: string;\n  location: {\n    address: string;\n    district: string;\n    city: string;\n    coordinates?: { lat: number; lng: number; };\n  };\n  budget: { min: number; max: number; };\n  targetCustomers: string[];\n  businessModel: 'dine-in' | 'delivery' | 'takeaway' | 'hybrid';\n  radius: number;\n  capacity?: number;\n}\n\nexport interface ChatMessage extends SharedChatMessage {\n  // Extended for local context if needed\n}\n\nexport interface Report extends ComprehensiveReport {\n  chatHistory: ChatMessage[];\n  agentStatuses: Record<string, AgentStatus>;\n  langGraphState?: LangGraphState;\n  analysisProgress: {\n    product: number;\n    place: number;\n    price: number;\n    promotion: number;\n  };\n  researchData: {\n    requirements?: RestaurantRequirements;\n    enhancedParams?: EnhancedRestaurantParams;\n    productAnalysis?: ProductAnalysis;\n    placeAnalysis?: PlaceAnalysis;\n    priceAnalysis?: PriceAnalysis;\n    promotionAnalysis?: PromotionAnalysis;\n  };\n  realTimeConnection?: {\n    sessionId: string;\n    connected: boolean;\n    lastUpdate: Date;\n  };\n}\n\ninterface ReportsContextType {\n  reports: Report[];\n  currentReport: Report | null;\n  \n  // Enhanced LangGraph Integration\n  startLangGraphAnalysis: (reportId: string, params: EnhancedRestaurantParams) => Promise<void>;\n  streamLangGraphUpdates: (reportId: string, callback: (update: LangGraphState) => void) => () => void;\n  pauseAnalysis: (reportId: string) => Promise<void>;\n  resumeAnalysis: (reportId: string) => Promise<void>;\n  cancelAnalysis: (reportId: string) => Promise<void>;\n  \n  // Enhanced State Management\n  updateLangGraphState: (reportId: string, state: Partial<LangGraphState>) => void;\n  getMCPServerStatus: () => Promise<Record<string, any>>;\n  getAgentHealth: () => Promise<any>;\n  \n  // Existing methods\n  createReport: (title: string, description: string, requirements?: RestaurantRequirements) => Report;\n  updateReport: (reportId: string, updates: Partial<Report>) => void;\n  deleteReport: (reportId: string) => void;\n  setCurrentReport: (report: Report | null) => void;\n  addChatMessage: (reportId: string, message: Omit<ChatMessage, 'messageId' | 'timestamp'>) => void;\n  updateAgentStatus: (reportId: string, agentId: string, status: Partial<AgentStatus>) => void;\n  updateAnalysisProgress: (reportId: string, analysisType: keyof Report['analysisProgress'], progress: number) => void;\n  setAnalysisData: (reportId: string, analysisType: keyof Report['researchData'], data: any) => void;\n  generateFinalReport: (reportId: string) => Promise<void>;\n  getReportById: (reportId: string) => Report | undefined;\n  \n  // Enhanced Real-time collaboration\n  subscribeToReportUpdates: (reportId: string, callback: (report: Report) => void) => () => void;\n  broadcastUpdate: (reportId: string, update: Partial<Report>) => void;\n  shareReport: (reportId: string, collaboratorIds: string[]) => Promise<void>;\n  inviteCollaborator: (reportId: string, email: string, permissions: string[]) => Promise<void>;\n}\n\nconst ReportsContext = createContext<ReportsContextType | undefined>(undefined);\n\nexport const useReports = () => {\n  const context = useContext(ReportsContext);\n  if (!context) {\n    throw new Error('useReports must be used within a ReportsProvider');\n  }\n  return context;\n};\n\ninterface ReportsProviderProps {\n  children: ReactNode;\n}\n\nexport const ReportsProvider: React.FC<ReportsProviderProps> = ({ children }) => {\n  const [reports, setReports] = useState<Report[]>([]);\n  const [currentReport, setCurrentReport] = useState<Report | null>(null);\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [langGraphConnections, setLangGraphConnections] = useState<Map<string, EventSource>>(new Map());\n\n  // Initialize WebSocket connection for real-time updates\n  useEffect(() => {\n    const socketConnection = io(process.env.NEXT_PUBLIC_WEBSOCKET_URL || 'http://localhost:3001', {\n      transports: ['websocket'],\n    });\n\n    socketConnection.on('connect', () => {\n      console.log('Connected to real-time server');\n    });\n\n    socketConnection.on('report-update', (data: { reportId: string; update: Partial<Report> }) => {\n      updateReport(data.reportId, data.update);\n    });\n\n    socketConnection.on('langgraph-update', (data: { reportId: string; state: LangGraphState }) => {\n      updateLangGraphState(data.reportId, data.state);\n    });\n\n    setSocket(socketConnection);\n\n    return () => {\n      socketConnection.disconnect();\n      // Close all EventSource connections\n      langGraphConnections.forEach(connection => connection.close());\n    };\n  }, []);\n\n  // Enhanced LangGraph Analysis Methods\n  const startLangGraphAnalysis = useCallback(async (reportId: string, params: EnhancedRestaurantParams) => {\n    try {\n      const response = await fetch('/api/agent/start-analysis', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          reportId,\n          restaurantParams: params,\n          analysisType: 'comprehensive',\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to start LangGraph analysis');\n      }\n\n      const result = await response.json();\n      \n      // Update report with initial LangGraph state\n      updateReport(reportId, {\n        langGraphState: {\n          sessionId: result.sessionId,\n          workflowId: result.workflowId,\n          currentNode: 'initialize',\n          agentProgress: {},\n          overallProgress: 0,\n          mcpServerStatus: {},\n          errors: [],\n        },\n        realTimeConnection: {\n          sessionId: result.sessionId,\n          connected: true,\n          lastUpdate: new Date(),\n        },\n      });\n\n      // Start streaming updates\n      streamLangGraphUpdates(reportId, (update) => {\n        updateLangGraphState(reportId, update);\n      });\n\n    } catch (error) {\n      console.error('Error starting LangGraph analysis:', error);\n      addChatMessage(reportId, {\n        role: 'system',\n        content: `Error starting analysis: ${error.message}`,\n        messageType: 'error',\n      });\n    }\n  }, []);\n\n  const streamLangGraphUpdates = useCallback((reportId: string, callback: (update: LangGraphState) => void) => {\n    const report = getReportById(reportId);\n    if (!report?.langGraphState?.sessionId) {\n      console.warn('No session ID found for streaming updates');\n      return () => {};\n    }\n\n    const eventSource = new EventSource(\n      `/api/agent/stream/${report.langGraphState.sessionId}`\n    );\n\n    eventSource.onmessage = (event) => {\n      try {\n        const update = JSON.parse(event.data);\n        callback(update);\n        \n        // Update real-time connection status\n        updateReport(reportId, {\n          realTimeConnection: {\n            ...report.realTimeConnection!,\n            lastUpdate: new Date(),\n          },\n        });\n      } catch (error) {\n        console.error('Error parsing stream update:', error);\n      }\n    };\n\n    eventSource.onerror = (error) => {\n      console.error('EventSource error:', error);\n      updateReport(reportId, {\n        realTimeConnection: {\n          ...report.realTimeConnection!,\n          connected: false,\n        },\n      });\n    };\n\n    // Store connection for cleanup\n    langGraphConnections.set(reportId, eventSource);\n\n    return () => {\n      eventSource.close();\n      langGraphConnections.delete(reportId);\n    };\n  }, [langGraphConnections]);\n\n  const pauseAnalysis = useCallback(async (reportId: string) => {\n    const report = getReportById(reportId);\n    if (!report?.langGraphState?.sessionId) return;\n\n    try {\n      await fetch(`/api/agent/pause/${report.langGraphState.sessionId}`, {\n        method: 'POST',\n      });\n      \n      updateLangGraphState(reportId, { currentNode: 'paused' });\n    } catch (error) {\n      console.error('Error pausing analysis:', error);\n    }\n  }, []);\n\n  const resumeAnalysis = useCallback(async (reportId: string) => {\n    const report = getReportById(reportId);\n    if (!report?.langGraphState?.sessionId) return;\n\n    try {\n      await fetch(`/api/agent/resume/${report.langGraphState.sessionId}`, {\n        method: 'POST',\n      });\n    } catch (error) {\n      console.error('Error resuming analysis:', error);\n    }\n  }, []);\n\n  const cancelAnalysis = useCallback(async (reportId: string) => {\n    const report = getReportById(reportId);\n    if (!report?.langGraphState?.sessionId) return;\n\n    try {\n      await fetch(`/api/agent/cancel/${report.langGraphState.sessionId}`, {\n        method: 'POST',\n      });\n      \n      // Close streaming connection\n      const connection = langGraphConnections.get(reportId);\n      if (connection) {\n        connection.close();\n        langGraphConnections.delete(reportId);\n      }\n      \n      updateLangGraphState(reportId, { currentNode: 'cancelled' });\n    } catch (error) {\n      console.error('Error cancelling analysis:', error);\n    }\n  }, [langGraphConnections]);\n\n  const updateLangGraphState = useCallback((reportId: string, state: Partial<LangGraphState>) => {\n    setReports(prev => prev.map(report => \n      report.reportId === reportId \n        ? { \n            ...report, \n            langGraphState: { ...report.langGraphState, ...state },\n            generatedAt: new Date()\n          }\n        : report\n    ));\n\n    if (currentReport?.reportId === reportId) {\n      setCurrentReport(prev => prev ? {\n        ...prev,\n        langGraphState: { ...prev.langGraphState, ...state },\n        generatedAt: new Date()\n      } : null);\n    }\n\n    // Sync agent progress with analysis progress\n    if (state.agentProgress) {\n      const progressMapping: Record<string, keyof Report['analysisProgress']> = {\n        'product-analysis': 'product',\n        'place-analysis': 'place',\n        'price-analysis': 'price',\n        'promotion-analysis': 'promotion',\n      };\n\n      Object.entries(state.agentProgress).forEach(([agentId, progress]) => {\n        const analysisType = progressMapping[agentId];\n        if (analysisType) {\n          updateAnalysisProgress(reportId, analysisType, progress.progress);\n        }\n      });\n    }\n  }, [currentReport]);\n\n  const getMCPServerStatus = useCallback(async () => {\n    try {\n      const response = await fetch('/api/agent/mcp-status');\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching MCP server status:', error);\n      return {};\n    }\n  }, []);\n\n  const getAgentHealth = useCallback(async () => {\n    try {\n      const response = await fetch('/api/agent/health');\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching agent health:', error);\n      return { status: 'unknown' };\n    }\n  }, []);\n\n  // Enhanced collaboration methods\n  const shareReport = useCallback(async (reportId: string, collaboratorIds: string[]) => {\n    if (!socket) return;\n\n    socket.emit('share-report', { reportId, collaboratorIds });\n    \n    updateReport(reportId, {\n      // Add collaboration metadata\n      generatedAt: new Date(),\n    });\n  }, [socket]);\n\n  const inviteCollaborator = useCallback(async (reportId: string, email: string, permissions: string[]) => {\n    try {\n      const response = await fetch('/api/collaboration/invite', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ reportId, email, permissions }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to invite collaborator');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error inviting collaborator:', error);\n      throw error;\n    }\n  }, []);\n\n  // Load reports from localStorage on mount\n  useEffect(() => {\n    const savedReports = localStorage.getItem('bitebase-reports');\n    if (savedReports) {\n      try {\n        const parsedReports = JSON.parse(savedReports).map((report: any) => ({\n          ...report,\n          createdAt: new Date(report.createdAt),\n          updatedAt: new Date(report.updatedAt),\n          chatHistory: report.chatHistory.map((msg: any) => ({\n            ...msg,\n            timestamp: new Date(msg.timestamp)\n          }))\n        }));\n        setReports(parsedReports);\n      } catch (error) {\n        console.error('Error loading reports from localStorage:', error);\n      }\n    }\n\n    // Load current report from localStorage\n    const savedCurrentReport = localStorage.getItem('bitebase-current-report');\n    if (savedCurrentReport) {\n      try {\n        const parsedCurrentReport = JSON.parse(savedCurrentReport);\n        parsedCurrentReport.createdAt = new Date(parsedCurrentReport.createdAt);\n        parsedCurrentReport.updatedAt = new Date(parsedCurrentReport.updatedAt);\n        parsedCurrentReport.chatHistory = parsedCurrentReport.chatHistory.map((msg: any) => ({\n          ...msg,\n          timestamp: new Date(msg.timestamp)\n        }));\n        setCurrentReport(parsedCurrentReport);\n      } catch (error) {\n        console.error('Error loading current report from localStorage:', error);\n      }\n    }\n  }, []);\n\n  // Save reports to localStorage whenever reports change\n  useEffect(() => {\n    localStorage.setItem('bitebase-reports', JSON.stringify(reports));\n  }, [reports]);\n\n  // Save current report to localStorage whenever it changes\n  useEffect(() => {\n    if (currentReport) {\n      localStorage.setItem('bitebase-current-report', JSON.stringify(currentReport));\n    } else {\n      localStorage.removeItem('bitebase-current-report');\n    }\n  }, [currentReport]);\n\n  const createReport = (title: string, description: string, requirements?: RestaurantRequirements): Report => {\n    const newReport: Report = {\n      reportId: Date.now().toString(),\n      title,\n      description,\n      requirements: requirements || {\n        restaurantType: 'cafe',\n        cuisineType: 'other',\n        location: '',\n        budgetRange: [0, 100000],\n        targetCustomers: '',\n        businessModel: 'hybrid'\n      },\n      sections: [],\n      executiveSummary: '',\n      keyFindings: [],\n      recommendations: [],\n      riskAssessment: [],\n      nextSteps: [],\n      generatedAt: new Date(),\n      confidence: 0,\n      dataSources: [],\n      chatHistory: [],\n      agentStatuses: {},\n      analysisProgress: {\n        product: 0,\n        place: 0,\n        price: 0,\n        promotion: 0\n      },\n      researchData: {}\n    };\n\n    setReports(prev => [...prev, newReport]);\n    setCurrentReport(newReport);\n    return newReport;\n  };\n\n  const updateReport = (reportId: string, updates: Partial<Report>) => {\n    setReports(prev => prev.map(report => \n      report.reportId === reportId \n        ? { ...report, ...updates, generatedAt: new Date() }\n        : report\n    ));\n\n    // Update current report if it's the one being updated\n    if (currentReport?.reportId === reportId) {\n      setCurrentReport(prev => prev ? { ...prev, ...updates, generatedAt: new Date() } : null);\n    }\n  };\n\n  const deleteReport = (reportId: string) => {\n    setReports(prev => prev.filter(report => report.reportId !== reportId));\n    \n    // Clear current report if it's the one being deleted\n    if (currentReport?.reportId === reportId) {\n      setCurrentReport(null);\n    }\n  };\n\n  const addChatMessage = (reportId: string, message: Omit<ChatMessage, 'messageId' | 'timestamp'>) => {\n    const newMessage: ChatMessage = {\n      ...message,\n      messageId: Date.now().toString(),\n      timestamp: new Date()\n    };\n\n    setReports(prev => prev.map(report => \n      report.reportId === reportId \n        ? { \n            ...report, \n            chatHistory: [...report.chatHistory, newMessage],\n            generatedAt: new Date()\n          }\n        : report\n    ));\n\n    // Update current report if it's the one being updated\n    if (currentReport?.reportId === reportId) {\n      setCurrentReport(prev => prev ? {\n        ...prev,\n        chatHistory: [...prev.chatHistory, newMessage],\n        generatedAt: new Date()\n      } : null);\n    }\n  };\n\n  const updateAgentStatus = (reportId: string, agentId: string, status: Partial<AgentStatus>) => {\n    const currentAgentStatus = currentReport?.agentStatuses?.[agentId];\n    const updatedStatus: AgentStatus = {\n      agentId,\n      agentName: status.agentName || currentAgentStatus?.agentName || 'Unknown Agent',\n      status: status.status || currentAgentStatus?.status || 'idle',\n      currentTask: status.currentTask || currentAgentStatus?.currentTask || '',\n      progressPercentage: status.progressPercentage ?? currentAgentStatus?.progressPercentage ?? 0,\n      substeps: status.substeps || currentAgentStatus?.substeps || [],\n      estimatedCompletion: status.estimatedCompletion || currentAgentStatus?.estimatedCompletion,\n      dataProcessed: status.dataProcessed ?? currentAgentStatus?.dataProcessed ?? 0,\n      processingRate: status.processingRate ?? currentAgentStatus?.processingRate ?? 0,\n      errors: status.errors || currentAgentStatus?.errors || [],\n      lastUpdate: new Date(),\n      userInteractionsPending: status.userInteractionsPending || currentAgentStatus?.userInteractionsPending || []\n    };\n    \n    const update = {\n      agentStatuses: {\n        ...currentReport?.agentStatuses,\n        [agentId]: updatedStatus\n      }\n    };\n    updateReport(reportId, update);\n  };\n\n  const updateAnalysisProgress = (reportId: string, analysisType: keyof Report['analysisProgress'], progress: number) => {\n    const currentProgress = currentReport?.analysisProgress;\n    const update = {\n      analysisProgress: {\n        product: currentProgress?.product ?? 0,\n        place: currentProgress?.place ?? 0,\n        price: currentProgress?.price ?? 0,\n        promotion: currentProgress?.promotion ?? 0,\n        ...currentProgress,\n        [analysisType]: progress\n      }\n    };\n    updateReport(reportId, update);\n  };\n\n  const setAnalysisData = (reportId: string, analysisType: keyof Report['researchData'], data: any) => {\n    const update = {\n      researchData: {\n        ...currentReport?.researchData,\n        [analysisType]: data\n      }\n    };\n    updateReport(reportId, update);\n  };\n\n  const generateFinalReport = async (reportId: string) => {\n    const report = getReportById(reportId);\n    if (!report) return;\n\n    // Generate executive summary and recommendations based on analysis data\n    const { productAnalysis, placeAnalysis, priceAnalysis, promotionAnalysis } = report.researchData;\n    \n    let executiveSummary = 'Comprehensive market research analysis completed for restaurant venture.';\n    let keyFindings: string[] = [];\n    let recommendations: string[] = [];\n    let riskAssessment: string[] = [];\n\n    if (productAnalysis) {\n      keyFindings.push(...productAnalysis.recommendations);\n    }\n    if (placeAnalysis) {\n      keyFindings.push(`Location score: ${placeAnalysis.locationScore}/100`);\n    }\n    if (priceAnalysis) {\n      recommendations.push(...Object.values(priceAnalysis.pricingRecommendations).map(p => `Optimal pricing: $${p}`));\n    }\n    if (promotionAnalysis) {\n      recommendations.push(...promotionAnalysis.marketingOpportunities);\n    }\n\n    updateReport(reportId, {\n      executiveSummary,\n      keyFindings,\n      recommendations,\n      riskAssessment,\n      nextSteps: ['Finalize business plan', 'Secure funding', 'Begin location setup'],\n      confidence: Math.round((Object.values(report.analysisProgress).reduce((a, b) => a + b, 0) / 4)),\n    });\n  };\n\n  const getReportById = (reportId: string): Report | undefined => {\n    return reports.find(report => report.reportId === reportId);\n  };\n\n  const subscribeToReportUpdates = (reportId: string, callback: (report: Report) => void) => {\n    // Simple implementation - in production this would use WebSocket or real-time database\n    const interval = setInterval(() => {\n      const report = getReportById(reportId);\n      if (report) {\n        callback(report);\n      }\n    }, 1000);\n\n    return () => clearInterval(interval);\n  };\n\n  const broadcastUpdate = (reportId: string, update: Partial<Report>) => {\n    // In production, this would broadcast to other connected clients\n    console.log('Broadcasting update for report', reportId, update);\n    updateReport(reportId, update);\n  };\n\n  const handleSetCurrentReport = (report: Report | null) => {\n    setCurrentReport(report);\n  };\n\n  const value: ReportsContextType = {\n    reports,\n    currentReport,\n    \n    // Enhanced LangGraph Integration\n    startLangGraphAnalysis,\n    streamLangGraphUpdates,\n    pauseAnalysis,\n    resumeAnalysis,\n    cancelAnalysis,\n    \n    // Enhanced State Management\n    updateLangGraphState,\n    getMCPServerStatus,\n    getAgentHealth,\n    \n    // Existing methods\n    createReport,\n    updateReport,\n    deleteReport,\n    setCurrentReport: handleSetCurrentReport,\n    addChatMessage,\n    updateAgentStatus,\n    updateAnalysisProgress,\n    setAnalysisData,\n    generateFinalReport,\n    getReportById,\n    \n    // Enhanced Real-time collaboration\n    subscribeToReportUpdates,\n    broadcastUpdate,\n    shareReport,\n    inviteCollaborator,\n  };\n\n  return (\n    <ReportsContext.Provider value={value}>\n      {children}\n    </ReportsContext.Provider>\n  );\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 769, "column": 0}, "map": {"version":3,"sources":["file:///workspace/bitebase-ai/frontend/src/lib/ai-service.ts"],"sourcesContent":["// AI Service for connecting to LangGraph agent via Copilot API\n\"use client\";\n\ninterface AIMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n}\n\ninterface MapContext {\n  center: { lat: number; lng: number };\n  zoom: number;\n  markers: Array<{\n    id: string;\n    type: string;\n    position: { lat: number; lng: number };\n    title: string;\n    description?: string;\n  }>;\n  bounds?: {\n    north: number;\n    south: number;\n    east: number;\n    west: number;\n  };\n}\n\ninterface AIServiceResponse {\n  content: string;\n  actions?: Array<{\n    type: 'add_marker' | 'remove_marker' | 'update_zoom' | 'update_center' | 'clear_markers' | 'bulk_add_markers';\n    payload: any;\n  }>;\n  metadata?: {\n    confidence: number;\n    reasoning?: string;\n  };\n}\n\nclass AIService {\n  private baseUrl: string;\n  private model: string;\n  private conversationHistory: AIMessage[] = [];\n\n  constructor() {\n    this.baseUrl = process.env.NEXT_PUBLIC_LANGGRAPH_ENDPOINT || 'http://localhost:8123';\n    this.model = 'starterAgent'; // LangGraph assistant ID\n    \n    // Initialize with system context\n    this.conversationHistory = [{\n      role: 'system',\n      content: `You are an AI assistant specialized in map interaction and geospatial analysis. \n      You can help users with:\n      - Adding markers (POI, business, location, route)\n      - Map navigation (zoom, pan, center)\n      - Data analysis and insights\n      - Bulk operations\n      - Geographic queries\n\n      When responding, you can suggest actions by including them in your response. Available actions:\n      - add_marker: Add a single marker\n      - bulk_add_markers: Add multiple markers\n      - remove_marker: Remove a specific marker\n      - clear_markers: Remove all markers\n      - update_zoom: Change zoom level\n      - update_center: Change map center\n      \n      Always provide helpful, contextual responses about map operations and geographic data.`\n    }];\n  }\n\n  async sendMessage(message: string, mapContext: MapContext): Promise<AIServiceResponse> {\n    try {\n      // Clear conversation history to avoid malformed tool calls from previous sessions\n      // TODO: Remove this once tool call issues are resolved\n      this.clearHistory();\n      \n      // Add user message to conversation history\n      this.conversationHistory.push({\n        role: 'user',\n        content: `${message}\\n\\nCurrent map context: ${JSON.stringify(mapContext, null, 2)}`\n      });\n\n      // Generate a unique thread ID for this conversation\n      const threadId = `chat-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n      // Prepare the request to the LangGraph agent using streaming\n      const response = await fetch(`${this.baseUrl}/runs/stream`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          assistant_id: this.model,\n          input: {\n            messages: this.conversationHistory.map(msg => ({\n              role: msg.role,\n              content: msg.content\n            }))\n          },\n          config: {\n            configurable: {\n              thread_id: threadId\n            }\n          },\n          stream_mode: \"values\"\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      // Handle streaming response (Server-Sent Events format)\n      let aiResponse = '';\n      const reader = response.body?.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      if (!reader) {\n        throw new Error('No response body reader available');\n      }\n\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n\n          const chunk = decoder.decode(value, { stream: true });\n          buffer += chunk;\n          \n          // Process complete events\n          const events = buffer.split('\\n\\n');\n          buffer = events.pop() || ''; // Keep incomplete event in buffer\n\n          for (const event of events) {\n            if (!event.trim()) continue;\n            \n            try {\n              const lines = event.split('\\n');\n              let eventType = '';\n              let eventDataLines: string[] = [];\n              \n              for (const line of lines) {\n                if (line.startsWith('event: ')) {\n                  eventType = line.slice(7);\n                } else if (line.startsWith('data: ')) {\n                  // Collect all data lines\n                  eventDataLines.push(line.slice(6));\n                }\n              }\n              \n              // Join all data lines to form complete JSON\n              const eventData = eventDataLines.join('');\n              \n              if (eventType === 'values' && eventData) {\n                const data = JSON.parse(eventData);\n                \n                // Look for AI/assistant messages\n                if (data.messages && Array.isArray(data.messages)) {\n                  // Check each message, prioritizing AI/assistant messages\n                  for (let i = data.messages.length - 1; i >= 0; i--) {\n                    const msg = data.messages[i];\n                    if (msg && msg.content && \n                        (msg.role === 'assistant' || msg.type === 'ai' || msg.type === 'AIMessage')) {\n                      aiResponse = msg.content;\n                      break; // Take the most recent AI message\n                    }\n                  }\n                }\n              }\n            } catch (parseError) {\n              console.warn('Failed to parse SSE event:', parseError);\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n\n      if (!aiResponse) {\n        console.warn('No AI response found in stream');\n        throw new Error('No valid response received from agent - stream may have been interrupted');\n      }\n\n      // Add AI response to conversation history\n      this.conversationHistory.push({\n        role: 'assistant',\n        content: aiResponse\n      });\n\n      // Parse response for potential actions\n      const actions = this.parseActions(aiResponse, message, mapContext);\n\n      return {\n        content: aiResponse,\n        actions: actions as Array<{ type: 'add_marker' | 'remove_marker' | 'update_zoom' | 'update_center' | 'clear_markers' | 'bulk_add_markers'; payload: any }>,\n        metadata: {\n          confidence: 0.85,\n          reasoning: 'Response generated by LangGraph restaurant intelligence agent'\n        }\n      };\n\n    } catch (error) {\n      console.error('AI Service Error:', error);\n      \n      // Fallback to local processing for offline/error scenarios\n      return this.fallbackResponse(message, mapContext);\n    }\n  }\n\n  private parseActions(response: string, userMessage: string, mapContext: MapContext): Array<{ type: string; payload: any }> {\n    const actions = [];\n    const lowerResponse = response.toLowerCase();\n    const lowerMessage = userMessage.toLowerCase();\n\n    // Pattern matching for common map operations\n    if (lowerMessage.includes('add') && (lowerMessage.includes('marker') || lowerMessage.includes('pin'))) {\n      // Determine marker type\n      let markerType = 'location';\n      if (lowerMessage.includes('poi') || lowerMessage.includes('landmark')) markerType = 'poi';\n      if (lowerMessage.includes('business') || lowerMessage.includes('restaurant') || lowerMessage.includes('coffee')) markerType = 'business';\n      if (lowerMessage.includes('route')) markerType = 'route';\n\n      // Check for bulk operations\n      const numberMatch = lowerMessage.match(/(\\d+)/);\n      const count = numberMatch ? parseInt(numberMatch[1]) : 1;\n\n      if (count > 1) {\n        actions.push({\n          type: 'bulk_add_markers',\n          payload: {\n            count: Math.min(count, 10),\n            type: markerType,\n            center: mapContext.center\n          }\n        });\n      } else {\n        actions.push({\n          type: 'add_marker',\n          payload: {\n            type: markerType,\n            position: mapContext.center,\n            title: `AI Generated ${markerType}`,\n            description: `Created from: \"${userMessage}\"`\n          }\n        });\n      }\n    }\n\n    if (lowerMessage.includes('clear') || lowerMessage.includes('remove all')) {\n      actions.push({\n        type: 'clear_markers',\n        payload: {}\n      });\n    }\n\n    if (lowerMessage.includes('zoom')) {\n      const zoomMatch = lowerMessage.match(/zoom.*?(\\d+)/);\n      if (zoomMatch) {\n        actions.push({\n          type: 'update_zoom',\n          payload: { zoom: parseInt(zoomMatch[1]) }\n        });\n      } else if (lowerMessage.includes('in')) {\n        actions.push({\n          type: 'update_zoom',\n          payload: { zoom: Math.min(20, mapContext.zoom + 2) }\n        });\n      } else if (lowerMessage.includes('out')) {\n        actions.push({\n          type: 'update_zoom',\n          payload: { zoom: Math.max(1, mapContext.zoom - 2) }\n        });\n      }\n    }\n\n    // Geographic location commands\n    if (lowerMessage.includes('go to') || lowerMessage.includes('center on')) {\n      if (lowerMessage.includes('san francisco')) {\n        actions.push({\n          type: 'update_center',\n          payload: { center: { lat: 37.7749, lng: -122.4194 } }\n        });\n      } else if (lowerMessage.includes('new york')) {\n        actions.push({\n          type: 'update_center',\n          payload: { center: { lat: 40.7128, lng: -74.0060 } }\n        });\n      } else if (lowerMessage.includes('london')) {\n        actions.push({\n          type: 'update_center',\n          payload: { center: { lat: 51.5074, lng: -0.1278 } }\n        });\n      }\n    }\n\n    return actions;\n  }\n\n  private fallbackResponse(message: string, mapContext: MapContext): AIServiceResponse {\n    const lowerMessage = message.toLowerCase();\n    \n    if (lowerMessage.includes('help')) {\n      return {\n        content: `🤖 **AI Map Assistant Help**\n\nI can help you with:\n• **Add markers**: \"add 3 coffee shops near current location\"\n• **Map navigation**: \"zoom to level 15\", \"center on New York\"\n• **Data analysis**: \"analyze marker distribution\"\n• **Bulk operations**: \"clear all markers\", \"add sample data\"\n\nCurrently running in offline mode. Start the LangGraph agent server for enhanced capabilities.`,\n        actions: []\n      };\n    }\n\n    if (lowerMessage.includes('status')) {\n      return {\n        content: `📊 **Map Status**\n• Markers: ${mapContext.markers.length}\n• Center: ${mapContext.center.lat.toFixed(4)}, ${mapContext.center.lng.toFixed(4)}\n• Zoom: ${mapContext.zoom.toFixed(1)}x\n• API Status: Offline (using fallback mode)`,\n        actions: []\n      };\n    }\n\n    return {\n      content: `I understand you said: \"${message}\". I'm currently in offline mode. Please start the LangGraph agent server and ensure it's running on port 8123.\\n\\nThen I'll be able to provide enhanced AI assistance!`,\n      actions: []\n    };\n  }\n\n  clearHistory() {\n    this.conversationHistory = this.conversationHistory.slice(0, 1); // Keep system message\n  }\n\n  getConversationHistory(): AIMessage[] {\n    return [...this.conversationHistory];\n  }\n}\n\n// Singleton instance\nexport const aiService = new AIService();\nexport type { AIServiceResponse, MapContext };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1051, "column": 0}, "map": {"version":3,"sources":["file:///workspace/bitebase-ai/frontend/src/components/chat/ChatInterface.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect, useRef, useCallback, useMemo, lazy, Suspense } from \"react\";\nimport { Button } from \"../ui/button\";\nimport { Card, CardHeader, CardContent, CardFooter } from \"../ui/card\";\nimport { Input } from \"../ui/input\";\nimport { ScrollArea } from \"../ui/scroll-area\";\nimport { Badge } from \"../ui/badge\";\nimport { Separator } from \"../ui/separator\";\nimport { Textarea } from \"../ui/textarea\";\nimport { useSharedState } from \"../shared/SharedStateProvider\";\nimport { useReports } from \"../../contexts/ReportsContext\";\nimport { aiService, type AIServiceResponse, type MapContext } from \"../../lib/ai-service\";\nimport { type GenerativeUIProps } from \"../generative/GenerativeUIManager\";\nimport { \n  Send, \n  Bot, \n  User, \n  MapPin, \n  Zap, \n  Code, \n  Layers, \n  History, \n  Copy,\n  Download,\n  RefreshCw,\n  Terminal,\n  Wifi,\n  WifiOff,\n} from \"lucide-react\";\n\n// Lazy load heavy components for better performance\nconst GenerativeUIManager = lazy(() => \n  import(\"../generative/GenerativeUIManager\").then(module => ({\n    default: module.GenerativeUIManager\n  }))\n);\n\n// Client-only timestamp component to prevent hydration issues\nfunction ClientTimestamp({ timestamp }: { timestamp: Date }) {\n  const [isClient, setIsClient] = useState(false);\n  \n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n  \n  if (!isClient) {\n    return <span>--:--:--</span>;\n  }\n  \n  return <span>{timestamp.toLocaleTimeString()}</span>;\n}\n\ninterface Message {\n  id: string;\n  content: string;\n  sender: \"user\" | \"ai\";\n  timestamp: Date;\n  type?: \"text\" | \"command\" | \"component\" | \"error\" | \"success\" | \"generative_ui\";\n  metadata?: Record<string, any>;\n  component?: React.ComponentType<any>;\n  generativeUI?: {\n    type: GenerativeUIProps['type'];\n    data: any;\n    pendingApproval?: boolean;\n  };\n}\n\ninterface ChatInterfaceProps {\n  className?: string;\n  initialMessage?: string;\n  reportId?: string;\n}\n\ninterface AICapability {\n  name: string;\n  description: string;\n  examples: string[];\n  category: \"map\" | \"data\" | \"ui\" | \"analysis\";\n}\n\nconst AI_CAPABILITIES: AICapability[] = [\n  {\n    name: \"Map Control\",\n    description: \"Control map zoom, center, and navigation\",\n    examples: [\n      \"zoom to level 15\",\n      \"center map on San Francisco\", \n      \"move to coordinates 37.7749, -122.4194\"\n    ],\n    category: \"map\"\n  },\n  {\n    name: \"Marker Management\", \n    description: \"Add, remove, and modify markers\",\n    examples: [\n      \"add a coffee shop marker at current center\",\n      \"remove all business markers\",\n      \"create 5 random POI markers\"\n    ],\n    category: \"map\"\n  },\n  {\n    name: \"Data Analysis\",\n    description: \"Analyze map data and provide insights\",\n    examples: [\n      \"analyze marker distribution\",\n      \"find closest markers to center\",\n      \"calculate total distance between markers\"\n    ],\n    category: \"analysis\"\n  },\n  {\n    name: \"Component Generation\",\n    description: \"Generate custom UI components\",\n    examples: [\n      \"create a marker info panel\",\n      \"generate a statistics dashboard\",\n      \"build a custom control widget\"\n    ],\n    category: \"ui\"\n  },\n  {\n    name: \"Bulk Operations\",\n    description: \"Perform operations on multiple items\",\n    examples: [\n      \"import markers from coordinates list\",\n      \"export all POI markers\",\n      \"batch update marker titles\"\n    ],\n    category: \"data\"\n  }\n];\n\nexport default function ChatInterface({ className = \"\", initialMessage, reportId }: ChatInterfaceProps) {\n  const { currentReport, addChatMessage, updateReport } = useReports();\n  \n  // Memoized state to prevent unnecessary re-renders\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [commandHistory, setCommandHistory] = useState<string[]>([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [isGenerativeUIReady, setIsGenerativeUIReady] = useState(false);\n  \n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Optimized chat history loading with memoization\n  const formattedMessages = useMemo(() => {\n    if (!currentReport?.chatHistory) return [];\n    return currentReport.chatHistory.map(msg => ({\n      id: msg.messageId,\n      content: msg.content,\n      sender: msg.sender === 'agent' ? 'ai' as const : msg.sender === 'user' ? 'user' as const : 'ai' as const,\n      timestamp: msg.timestamp,\n      type: 'text' as const,\n      metadata: msg.metadata\n    }));\n  }, [currentReport?.chatHistory]);\n\n  // Load chat history from current report\n  useEffect(() => {\n    setMessages(formattedMessages);\n  }, [formattedMessages]);\n\n  // Enhanced shared state integration for seamless report-chat connectivity\n  const { \n    mapState,\n    addMarker,\n    updateMarker,\n    removeMarker,\n    clearMarkers,\n    bulkAddMarkers,\n    selectMarker,\n    updateZoom,\n    updateCenter,\n    executeCommand,\n    generateComponent,\n    getMarkersByType,\n    getMarkersInBounds,\n    exportState,\n    forceSync,\n    conductMarketAnalysis,\n    generateLocationInsights,\n  } = useSharedState();\n\n  // Optimized auto-scroll with throttling\n  const scrollToBottom = useCallback(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, []);\n\n  useEffect(() => {\n    const timeoutId = setTimeout(scrollToBottom, 100);\n    return () => clearTimeout(timeoutId);\n  }, [messages, scrollToBottom]);\n\n  // Enhanced state change monitoring\n  useEffect(() => {\n    const checkStateChanges = () => {\n      // Monitor for significant state changes and provide contextual responses\n      if (mapState.isSyncing) {\n        // Don't spam during sync\n        return;\n      }\n\n      // Check for new markers\n      const currentMarkerCount = mapState.markers.length;\n      const lastMessage = messages[messages.length - 1];\n      \n      if (lastMessage?.metadata?.markerCount !== undefined && \n          currentMarkerCount !== lastMessage.metadata.markerCount &&\n          lastMessage.sender === \"ai\" &&\n          Date.now() - lastMessage.timestamp.getTime() > 2000) {\n        \n        if (currentMarkerCount > lastMessage.metadata.markerCount) {\n          addAIMessage(\n            `🎯 I detected ${currentMarkerCount - lastMessage.metadata.markerCount} new marker(s) added! The map now has ${currentMarkerCount} total markers.`,\n            \"success\",\n            { markerCount: currentMarkerCount }\n          );\n        } else if (currentMarkerCount < lastMessage.metadata.markerCount) {\n          addAIMessage(\n            `🗑️ ${lastMessage.metadata.markerCount - currentMarkerCount} marker(s) removed. ${currentMarkerCount} markers remaining.`,\n            \"text\",\n            { markerCount: currentMarkerCount }\n          );\n        }\n      }\n    };\n\n    const interval = setInterval(checkStateChanges, 3000);\n    return () => clearInterval(interval);\n  }, [mapState.markers.length, mapState.isSyncing, messages]);\n\n  const addUserMessage = useCallback((content: string, type: Message[\"type\"] = \"text\") => {\n    const newMessage: Message = {\n      id: `user-${Date.now()}`,\n      content,\n      sender: \"user\",\n      timestamp: new Date(),\n      type,\n    };\n    setMessages(prev => [...prev, newMessage]);\n    \n    // Save to reports context\n    if (currentReport && reportId) {\n      addChatMessage(reportId, {\n        content,\n        sender: \"user\",\n        metadata: {},\n        messageType: \"user_query\"\n      });\n    }\n    \n    // Add to command history\n    if (type === \"command\" || content.startsWith(\"/\")) {\n      setCommandHistory(prev => {\n        const newHistory = [content, ...prev.filter(cmd => cmd !== content)];\n        return newHistory.slice(0, 50); // Keep last 50 commands\n      });\n      setHistoryIndex(-1);\n    }\n  }, [currentReport, reportId, addChatMessage]);\n\n  const addAIMessage = useCallback((content: string, type: Message[\"type\"] = \"text\", metadata?: Record<string, any>, component?: React.ComponentType<any>) => {\n    const newMessage: Message = {\n      id: `ai-${Date.now()}`,\n      content,\n      sender: \"ai\",\n      timestamp: new Date(),\n      type,\n      metadata: { markerCount: mapState.markers.length, ...metadata },\n      component,\n    };\n    setMessages(prev => [...prev, newMessage]);\n    \n    // Save to reports context\n    if (currentReport && reportId) {\n      addChatMessage(reportId, {\n        content,\n        sender: \"agent\",\n        metadata: metadata || {},\n        messageType: \"agent_response\"\n      });\n    }\n  }, [mapState.markers.length, currentReport, reportId, addChatMessage]);\n\n  const processAICommand = useCallback(async (userMessage: string): Promise<void> => {\n    try {\n      // Enhanced keyword detection for comprehensive restaurant analytics\n      const lowerMessage = userMessage.toLowerCase();\n      \n      // Import BiteBase API for advanced analytics\n      const { bitebaseApi } = await import('../../services/bitebaseApi');\n      \n      // Professional Market Research Commands\n      \n      // 1. Comprehensive Market Analysis\n      if (lowerMessage.includes('comprehensive') && (lowerMessage.includes('analysis') || lowerMessage.includes('market'))) {\n        addAIMessage(\"🔍 Conducting comprehensive market analysis with advanced geospatial intelligence...\", \"text\");\n        \n        const query = {\n          center: mapState.center,\n          radius: mapState.bufferRadius || 1000,\n          filters: {\n            includeCompetitors: true,\n            minimumRating: 3.0,\n          }\n        };\n        \n        const analysis = await bitebaseApi.conductComprehensiveAnalysis(query);\n        \n        const comprehensiveAnalysis = {\n          id: `analysis-${Date.now()}`,\n          location: mapState.center,\n          locationName: \"Current Location\",\n          radius: query.radius,\n          competitorCount: analysis.competitors.length,\n          marketSaturation: analysis.marketSummary.saturationLevel,\n          opportunityScore: analysis.marketSummary.opportunityScore,\n          confidenceLevel: 95,\n          recommendedCuisines: analysis.marketSummary.recommendations\n            .filter(r => r.includes('cuisine') || r.includes('Asian') || r.includes('Mexican'))\n            .map(r => r.toLowerCase().replace(/[^a-z]/g, ''))\n            .filter(Boolean)\n            .slice(0, 3) || ['fusion', 'american', 'asian'],\n          recommendedPriceRange: '$$' as const,\n          estimatedRevenue: {\n            conservative: analysis.marketSummary.totalMarketSize * 0.05,\n            realistic: analysis.marketSummary.totalMarketSize * 0.08,\n            optimistic: analysis.marketSummary.totalMarketSize * 0.12,\n          },\n          riskFactors: [\"Market competition\", \"Economic volatility\", \"Seasonal variation\"],\n          strengths: [\"Growing market\", \"Demographic alignment\", \"Location accessibility\"],\n          insights: analysis.marketSummary.recommendations,\n          competitors: analysis.competitors.map(comp => ({\n            name: comp.restaurant.name,\n            distance: Math.round(Math.random() * 1000),\n            rating: comp.restaurant.rating,\n            priceRange: comp.restaurant.priceRange,\n            cuisine: comp.restaurant.cuisine,\n            threatLevel: comp.threatLevel,\n            weaknesses: comp.weaknesses,\n            strengths: comp.competitiveAdvantages,\n            marketShare: comp.marketShare,\n          })),\n          marketMetrics: {\n            marketSize: analysis.marketSummary.totalMarketSize,\n            marketGrowth: analysis.marketSummary.growthRate,\n            customerAcquisitionCost: 45,\n            averageLifetimeValue: 850,\n            marketPenetration: 8.5,\n            seasonalityIndex: 0.25,\n          },\n          demographics: {\n            totalPopulation: 12500,\n            targetDemographic: 8200,\n            avgIncome: 72000,\n            diningFrequency: 8.5,\n            preferredCuisines: ['asian', 'american', 'mediterranean'],\n            priceToleranceRange: { min: 15, max: 45 },\n            primaryAgeGroups: { '26-35': 35, '36-45': 25, '18-25': 20, '46-55': 15, '55+': 5 },\n            lifestyleSegments: { 'young_professionals': 40, 'families': 30, 'students': 15, 'other': 15 },\n          },\n          recommendations: {\n            positioning: \"Modern casual dining with focus on fresh, healthy options\",\n            menuStrategy: [\"Customizable bowls\", \"Locally sourced ingredients\", \"Dietary restrictions accommodation\"],\n            pricingStrategy: \"Premium value positioning with competitive lunch pricing\",\n            marketingChannels: [\"Instagram\", \"Google Ads\", \"Local partnerships\", \"Delivery apps\"],\n            operationalInsights: [\"Extended lunch hours\", \"Delivery optimization\", \"Loyalty program\"],\n          },\n          footTrafficAnalysis: {\n            peakHours: ['12:00-13:30', '18:00-20:00'],\n            dailyTraffic: 450,\n            seasonalVariation: 0.2,\n            weekdayVsWeekend: { weekday: 380, weekend: 520 },\n          },\n        };\n        \n        const { MarketAnalysisCard } = await import('../generative/MarketAnalysisCard');\n        \n        addAIMessage(\n          \"📊 **Comprehensive Market Analysis Complete!**\\n\\n\" +\n          `🎯 **Opportunity Score: ${comprehensiveAnalysis.opportunityScore}/100**\\n` +\n          `🏪 **Market Saturation: ${comprehensiveAnalysis.marketSaturation}**\\n` +\n          `💰 **Market Size: $${(analysis.marketSummary.totalMarketSize / 1000000).toFixed(1)}M**\\n` +\n          `📈 **Growth Rate: ${analysis.marketSummary.growthRate}%**\\n\\n` +\n          \"**Key Insights:**\\n\" +\n          analysis.marketSummary.recommendations.map(r => `• ${r}`).join('\\n') +\n          \"\\n\\n*Review the detailed analysis card below for comprehensive insights.*\",\n          \"component\",\n          { analysisType: 'comprehensive' },\n          () => MarketAnalysisCard({\n            analysis: comprehensiveAnalysis,\n            onApprove: (data) => {\n              addAIMessage(\"✅ Comprehensive analysis approved and added to map!\", \"success\");\n            },\n            onReject: () => {\n              addAIMessage(\"❌ Analysis rejected. Let me know if you'd like a different approach.\", \"text\");\n            },\n            onRequestDetails: () => {\n              addAIMessage(\"🔍 Generating detailed breakdown...\", \"text\");\n            }\n          })\n        );\n        return;\n      }\n      \n      // 2. Hotspot Analysis\n      if (lowerMessage.includes('hotspot') || (lowerMessage.includes('delivery') && lowerMessage.includes('analysis'))) {\n        addAIMessage(\"🔥 Analyzing delivery and foot traffic hotspots...\", \"text\");\n        \n        const hotspots = await bitebaseApi.analyzeHotspots({\n          center: mapState.center,\n          radius: mapState.bufferRadius || 1000,\n        });\n        \n        let hotspotReport = \"🔥 **Hotspot Analysis Results**\\n\\n\";\n        hotspots.forEach((hotspot, idx) => {\n          hotspotReport += `**${idx + 1}. ${hotspot.type.toUpperCase()} Hotspot**\\n`;\n          hotspotReport += `• Intensity: ${(hotspot.intensity * 100).toFixed(0)}% (${hotspot.confidence}% confidence)\\n`;\n          hotspotReport += `• Peak Hours: ${hotspot.peakHours.join(', ')}\\n`;\n          hotspotReport += `• Average Volume: ${hotspot.metrics.averageVolume}/day\\n`;\n          hotspotReport += `• Growth Rate: ${hotspot.metrics.growthRate}% YoY\\n`;\n          hotspotReport += `• Primary Demo: ${hotspot.demographicProfile.primaryAgeGroup}, $${hotspot.demographicProfile.avgIncome.toLocaleString()}\\n\\n`;\n        });\n        \n        hotspotReport += \"💡 **Strategic Recommendations:**\\n\";\n        hotspotReport += \"• Position near high-intensity delivery hotspots\\n\";\n        hotspotReport += \"• Optimize menu for peak hour demographics\\n\";\n        hotspotReport += \"• Consider satellite locations in secondary hotspots\\n\";\n        \n        addAIMessage(hotspotReport, \"success\");\n        return;\n      }\n      \n      // 3. Competitor Deep Dive\n      if (lowerMessage.includes('competitor') && (lowerMessage.includes('analysis') || lowerMessage.includes('deep'))) {\n        // Generate competitor analysis card\n        const competitorData = {\n          location: mapState.center,\n          radius: 1000,\n          competitorCount: 8,\n          averageRating: 4.2,\n          priceDistribution: { '$': 2, '$$': 4, '$$$': 2, '$$$$': 0 },\n          cuisineGaps: ['Mexican', 'Thai', 'Vegan'],\n          topCompetitors: [\n            {\n              name: \"Tony's Pizzeria\",\n              cuisine: \"Italian\",\n              rating: 4.5,\n              priceRange: \"$$\",\n              distance: 250,\n              weaknesses: [\"Limited seating\", \"No delivery\"]\n            },\n            {\n              name: \"Burger Palace\",\n              cuisine: \"American\",\n              rating: 4.1,\n              priceRange: \"$\",\n              distance: 180,\n              weaknesses: [\"Fast food only\", \"No dinner menu\"]\n            },\n            {\n              name: \"Sushi Zen\",\n              cuisine: \"Japanese\",\n              rating: 4.7,\n              priceRange: \"$$$\",\n              distance: 320,\n              weaknesses: [\"High prices\", \"Limited lunch hours\"]\n            }\n          ],\n          marketOpportunities: [\n            \"Gap in affordable Mexican cuisine\",\n            \"No quality breakfast options\",\n            \"Limited vegetarian/vegan choices\"\n          ],\n          competitiveAdvantages: [\n            \"Prime location with high foot traffic\",\n            \"Ample parking available\",\n            \"Close to business district\"\n          ],\n          threats: [\n            \"Established competitors with loyal customers\",\n            \"High rent costs in area\"\n          ],\n          overallThreatLevel: 'medium' as const\n        };\n        \n        const aiMessage: Message = {\n          id: `ai-${Date.now()}`,\n          content: `I've analyzed the competitive landscape in this area. Here's what I found:`,\n          sender: \"ai\",\n          timestamp: new Date(),\n          type: \"generative_ui\",\n          generativeUI: {\n            type: 'competitor_analysis',\n            data: competitorData,\n            pendingApproval: true,\n          }\n        };\n        \n        setMessages(prev => [...prev, aiMessage]);\n        return;\n      }\n\n      // Check for market analysis specifically\n      if (lowerMessage.includes('market') && lowerMessage.includes('analysis')) {\n        try {\n          const analysisData = await conductMarketAnalysis(mapState.center, 1000);\n          \n          const aiMessage: Message = {\n            id: `ai-${Date.now()}`,\n            content: `I've conducted a market analysis for this location. Here are the findings:`,\n            sender: \"ai\",\n            timestamp: new Date(),\n            type: \"generative_ui\",\n            generativeUI: {\n              type: 'market_analysis',\n              data: analysisData,\n              pendingApproval: true,\n            }\n          };\n          \n          setMessages(prev => [...prev, aiMessage]);\n        } catch (error) {\n          console.error('Market analysis failed:', error);\n          const errorMessage: Message = {\n            id: `ai-${Date.now()}`,\n            content: \"I apologize, but I encountered an error while generating the market analysis. Please try again.\",\n            sender: \"ai\",\n            timestamp: new Date()\n          };\n          setMessages(prev => [...prev, errorMessage]);\n        }\n        return;\n      }\n\n      // Check for location search queries (restaurants, cafes, etc.)\n      const locationSearchTerms = ['find', 'search'];\n      const businessTypeTerms = ['restaurant', 'cafe', 'coffee shop', 'bistro'];\n      const isLocationSearch = locationSearchTerms.some(term => lowerMessage.includes(term)) &&\n                              businessTypeTerms.some(term => lowerMessage.includes(term));\n      \n      if (isLocationSearch) {\n        try {\n          const locationData = await generateLocationInsights(mapState.center);\n          \n          const aiMessage: Message = {\n            id: `ai-${Date.now()}`,\n            content: `I found a location that matches your search. Here are the details:`,\n            sender: \"ai\",\n            timestamp: new Date(),\n            type: \"generative_ui\",\n            generativeUI: {\n              type: 'location',\n              data: locationData,\n              pendingApproval: true,\n            }\n          };\n          \n          setMessages(prev => [...prev, aiMessage]);\n        } catch (error) {\n          console.error('Location search failed:', error);\n          const errorMessage: Message = {\n            id: `ai-${Date.now()}`,\n            content: \"I apologize, but I encountered an error while searching for locations. Please try again.\",\n            sender: \"ai\",\n            timestamp: new Date()\n          };\n          setMessages(prev => [...prev, errorMessage]);\n        }\n        return;\n      }\n\n      // If not a special generative UI query, proceed with normal AI processing\n      // Prepare map context for AI service\n      const mapContext: MapContext = {\n        center: mapState.center,\n        zoom: mapState.zoom,\n        markers: mapState.markers.map(marker => ({\n          id: marker.id,\n          type: marker.type,\n          position: marker.position,\n          title: marker.title,\n          description: marker.description\n        })),\n        bounds: mapState.bounds\n      };\n\n      // Send message to AI service\n      const response: AIServiceResponse = await aiService.sendMessage(userMessage, mapContext);\n      \n      // Display AI response\n      addAIMessage(response.content, \"success\", response.metadata);\n\n      // Execute any actions suggested by the AI\n      if (response.actions && response.actions.length > 0) {\n        for (const action of response.actions) {\n          await executeAIAction(action);\n        }\n      }\n\n    } catch (error) {\n      console.error('AI Command Error:', error);\n      addAIMessage(`❌ Error processing AI command: ${error instanceof Error ? error.message : 'Unknown error'}`, \"error\");\n    }\n  }, [mapState, addAIMessage]);\n\n  const executeAIAction = useCallback(async (action: { type: string; payload: any }) => {\n    try {\n      switch (action.type) {\n        case 'add_marker':\n          await addMarker({\n            type: action.payload.type,\n            position: action.payload.position,\n            title: action.payload.title,\n            description: action.payload.description,\n          });\n          break;\n\n        case 'bulk_add_markers':\n          const markers = Array.from({ length: action.payload.count }, (_, i) => ({\n            type: action.payload.type,\n            position: {\n              lat: action.payload.center.lat + (Math.random() - 0.5) * 0.02,\n              lng: action.payload.center.lng + (Math.random() - 0.5) * 0.02,\n            },\n            title: `AI Generated ${action.payload.type} ${i + 1}`,\n            description: `Generated by AI assistant`,\n          }));\n          await bulkAddMarkers(markers);\n          break;\n\n        case 'remove_marker':\n          if (action.payload.id) {\n            removeMarker(action.payload.id);\n          }\n          break;\n\n        case 'clear_markers':\n          clearMarkers();\n          break;\n\n        case 'update_zoom':\n          updateZoom(action.payload.zoom);\n          break;\n\n        case 'update_center':\n          updateCenter(action.payload.center);\n          break;\n\n        default:\n          console.warn('Unknown AI action type:', action.type);\n      }\n    } catch (error) {\n      console.error('Error executing AI action:', error);\n      addAIMessage(`⚠️ Failed to execute action: ${action.type}`, \"error\");\n    }\n  }, [addMarker, bulkAddMarkers, removeMarker, clearMarkers, updateZoom, updateCenter, addAIMessage]);\n\n  // Handle initial message from landing page\n  useEffect(() => {\n    if (initialMessage && messages.length === 0) {\n      // Add the user message\n      const userMessage: Message = {\n        id: `user-${Date.now()}`,\n        content: initialMessage,\n        sender: \"user\",\n        timestamp: new Date(),\n        type: \"text\",\n      };\n      \n      setMessages([userMessage]);\n      setIsProcessing(true);\n\n      // Process the message with AI\n      processAICommand(initialMessage).finally(() => {\n        setIsProcessing(false);\n      });\n    }\n  }, [initialMessage, messages.length, processAICommand]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!inputValue.trim() || isProcessing) return;\n\n    const message = inputValue.trim();\n    const isCommand = message.startsWith(\"/\") || message.toLowerCase().includes(\"add\") || message.toLowerCase().includes(\"zoom\") || message.toLowerCase().includes(\"clear\");\n    \n    addUserMessage(message, isCommand ? \"command\" : \"text\");\n    setInputValue(\"\");\n    setIsProcessing(true);\n\n    try {\n      await processAICommand(message);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"ArrowUp\" && commandHistory.length > 0) {\n      e.preventDefault();\n      const newIndex = Math.min(historyIndex + 1, commandHistory.length - 1);\n      setHistoryIndex(newIndex);\n      setInputValue(commandHistory[newIndex]);\n    } else if (e.key === \"ArrowDown\") {\n      e.preventDefault();\n      if (historyIndex > 0) {\n        const newIndex = historyIndex - 1;\n        setHistoryIndex(newIndex);\n        setInputValue(commandHistory[newIndex]);\n      } else {\n        setHistoryIndex(-1);\n        setInputValue(\"\");\n      }\n    }\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setInputValue(suggestion);\n    inputRef.current?.focus();\n  };\n\n  const clearChat = () => {\n    setMessages([]);\n  };\n\n  const exportChat = () => {\n    const chatData = {\n      messages,\n      timestamp: new Date().toISOString(),\n      mapState: {\n        center: mapState.center,\n        zoom: mapState.zoom,\n        markerCount: mapState.markers.length,\n      }\n    };\n    \n    const blob = new Blob([JSON.stringify(chatData, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `chat-history-${new Date().toISOString().split('T')[0]}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const quickCommands = [\n    \"find italian restaurant nearby\",\n    \"analyze market for new cafe\",\n    \"search potential restaurant sites\", \n    \"competitor analysis in area\",\n    \"find coffee shops in location\",\n    \"market analysis for thai restaurant\",\n    \"demographic data for location\",\n    \"add 3 coffee shops nearby\",\n    \"analyze marker distribution\", \n    \"zoom to level 15\",\n    \"center map on current location\",\n    \"create a statistics panel\",\n    \"clear all markers\",\n    \"export map data\",\n    \"help - show all capabilities\"\n  ];\n\n  return (\n    <Card className={`flex flex-col h-full overflow-hidden bg-transparent border-none shadow-none ${className}`}>\n\n      <CardContent className=\"flex-grow p-0 overflow-hidden bg-transparent\">\n        <ScrollArea className=\"h-full p-4\">\n          <div className=\"space-y-4\">\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex gap-3 ${message.sender === \"user\" ? \"justify-end\" : \"justify-start\"}`}\n              >\n                <div className={`flex gap-3 max-w-[85%] ${message.sender === \"user\" ? \"flex-row-reverse\" : \"\"}`}>\n                  <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${\n                    message.sender === \"user\" \n                      ? \"bg-blue-500 text-white\" \n                      : \"bg-gradient-to-r from-purple-500 to-pink-500 text-white\"\n                  }`}>\n                    {message.sender === \"user\" ? <User className=\"h-4 w-4\" /> : <Bot className=\"h-4 w-4\" />}\n                  </div>\n                  \n                  <div className={`flex flex-col gap-2 ${message.sender === \"user\" ? \"items-end\" : \"items-start\"}`}>\n                    <div className={`p-3 rounded-lg ${\n                      message.sender === \"user\"\n                        ? \"bg-blue-500 text-white\"\n                        : message.type === \"error\"\n                        ? \"bg-red-50 border border-red-200 text-red-800\"\n                        : message.type === \"success\"\n                        ? \"bg-green-50 border border-green-200 text-green-800\"\n                        : message.type === \"command\"\n                        ? \"bg-yellow-50 border border-yellow-200 text-yellow-800\"\n                        : message.type === \"generative_ui\"\n                        ? \"bg-blue-50 border border-blue-200 text-blue-800\"\n                        : \"bg-gradient-to-r from-indigo-50 to-purple-50 border border-purple-200 text-gray-800\"\n                    }`}>\n                      <div className=\"whitespace-pre-wrap text-sm\">\n                        {message.content}\n                      </div>\n                      \n                      {message.component && (\n                        <div className=\"mt-3 p-3 bg-white rounded border\">\n                          <message.component />\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Generative UI Component */}\n                    {message.generativeUI && (\n                      <div className=\"mt-2 w-full max-w-lg\">\n                        <GenerativeUIManager\n                          type={message.generativeUI.type}\n                          data={message.generativeUI.data}\n                          messageId={message.id}\n                          showActions={message.generativeUI.pendingApproval}\n                          onApprove={(data: any) => {\n                            // Update message to show approval\n                            setMessages(prev => prev.map(msg => \n                              msg.id === message.id \n                                ? { \n                                    ...msg, \n                                    generativeUI: { \n                                      ...msg.generativeUI!, \n                                      pendingApproval: false \n                                    } \n                                  }\n                                : msg\n                            ));\n                            \n                            // Add confirmation message\n                            addAIMessage(`✅ ${message.generativeUI!.type.replace('_', ' ')} has been added to the map successfully!`, \"success\");\n                          }}\n                          onReject={() => {\n                            // Update message to hide actions\n                            setMessages(prev => prev.map(msg => \n                              msg.id === message.id \n                                ? { \n                                    ...msg, \n                                    generativeUI: { \n                                      ...msg.generativeUI!, \n                                      pendingApproval: false \n                                    } \n                                  }\n                                : msg\n                            ));\n                            \n                            // Add rejection message\n                            addAIMessage(\"The suggestion has been rejected. Would you like me to find alternatives?\", \"text\");\n                          }}\n                          onRequestMore={() => {\n                            // Generate follow-up AI response\n                            addAIMessage(\"Let me provide more detailed information about this suggestion...\", \"text\");\n                            \n                            // You could trigger additional API calls here\n                            setTimeout(() => {\n                              addAIMessage(\"Here are additional insights and recommendations based on the data.\", \"success\");\n                            }, 1000);\n                          }}\n                        />\n                      </div>\n                    )}\n                    \n                    <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n                      <ClientTimestamp timestamp={message.timestamp} />\n                      {message.type && message.type !== \"text\" && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {message.type}\n                        </Badge>\n                      )}\n                      {message.sender === \"ai\" && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          className=\"h-6 w-6 p-0\"\n                          onClick={() => navigator.clipboard.writeText(message.content)}\n                        >\n                          <Copy className=\"h-3 w-3\" />\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n            \n            {isProcessing && (\n              <div className=\"flex gap-3 justify-start\">\n                <div className=\"flex gap-3 max-w-[85%]\">\n                  <div className=\"flex-shrink-0 w-8 h-8 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white flex items-center justify-center\">\n                    <Bot className=\"h-4 w-4\" />\n                  </div>\n                  <div className=\"bg-gradient-to-r from-indigo-50 to-purple-50 border border-purple-200 p-3 rounded-lg\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                      <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                      Processing your request...\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            <div ref={messagesEndRef} />\n          </div>\n        </ScrollArea>\n      </CardContent>\n\n      {/* Quick Commands */}\n      <div className=\"px-4 py-3 bg-gray-50 border-t\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <h4 className=\"text-sm font-medium text-gray-700 flex items-center gap-2\">\n            <Terminal className=\"h-4 w-4\" />\n            Quick Commands\n          </h4>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => setShowAdvanced(!showAdvanced)}\n          >\n            {showAdvanced ? \"Less\" : \"More\"}\n          </Button>\n        </div>\n        \n        <div className={`grid gap-2 ${showAdvanced ? \"grid-cols-1\" : \"grid-cols-2\"}`}>\n          {(showAdvanced ? quickCommands : quickCommands.slice(0, 4)).map((command, index) => (\n            <Button\n              key={index}\n              variant=\"outline\"\n              className=\"text-xs justify-start h-auto py-2 bg-white hover:bg-indigo-50 text-indigo-700 border-indigo-200\"\n              onClick={() => handleSuggestionClick(command)}\n            >\n              <Code className=\"h-3 w-3 mr-2 flex-shrink-0\" />\n              <span className=\"truncate\">{command}</span>\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      <CardFooter className=\"p-4 pt-2 bg-transparent\">\n        <form onSubmit={handleSubmit} className=\"flex w-full gap-2\">\n          <div className=\"flex-grow relative\">\n            <Input\n              ref={inputRef}\n              placeholder=\"Type a command or question... (↑/↓ for history)\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              onKeyDown={handleKeyDown}\n              className=\"pr-10\"\n              disabled={isProcessing}\n            />\n            {commandHistory.length > 0 && (\n              <Badge variant=\"outline\" className=\"absolute right-2 top-1/2 -translate-y-1/2 text-xs\">\n                <History className=\"h-3 w-3 mr-1\" />\n                {commandHistory.length}\n              </Badge>\n            )}\n          </div>\n          <Button \n            type=\"submit\" \n            size=\"icon\"\n            disabled={!inputValue.trim() || isProcessing}\n            className=\"bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700\"\n          >\n            {isProcessing ? (\n              <RefreshCw className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <Send className=\"h-4 w-4\" />\n            )}\n          </Button>\n        </form>\n      </CardFooter>\n    </Card>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}