{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///workspace/bitebase-ai/frontend/src/services/bitebaseApi.ts"],"sourcesContent":["// BiteBase API Service - Professional market research interface\nexport interface AnalysisRequest {\n  location?: {\n    lat: number;\n    lng: number;\n    radius?: number;\n  };\n  restaurantType?: string;\n  cuisine?: string[];\n  budget?: {\n    min: number;\n    max: number;\n  };\n  targetMarket?: string;\n}\n\nexport interface AnalysisResult {\n  id: string;\n  timestamp: string;\n  request: AnalysisRequest;\n  results: {\n    product: any;\n    place: any;\n    price: any;\n    promotion: any;\n  };\n  recommendations: string[];\n  confidence: number;\n}\n\nexport class BiteBaseAPI {\n  private baseUrl = 'http://localhost:45003';\n\n  async startAnalysis(request: AnalysisRequest): Promise<string> {\n    // Generate session ID\n    const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    // This would integrate with the WebSocket service for real analysis\n    console.log('Starting BiteBase analysis:', request);\n    \n    return sessionId;\n  }\n\n  async getAnalysisStatus(sessionId: string): Promise<{ status: string; progress: number }> {\n    // Mock implementation - in real app this would query the backend\n    return {\n      status: 'running',\n      progress: 45\n    };\n  }\n\n  async getAnalysisResult(sessionId: string): Promise<AnalysisResult | null> {\n    // Mock implementation\n    return {\n      id: sessionId,\n      timestamp: new Date().toISOString(),\n      request: {},\n      results: {\n        product: { topDishes: ['Pad Thai', 'Green Curry'] },\n        place: { competitorCount: 15 },\n        price: { avgRevenue: 85000 },\n        promotion: { avgRating: 4.2 }\n      },\n      recommendations: [\n        'Consider mid-price positioning',\n        'Focus on delivery optimization'\n      ],\n      confidence: 0.85\n    };\n  }\n\n  // Market research commands for chat interface\n  async executeCommand(command: string, parameters: any = {}): Promise<any> {\n    console.log('Executing BiteBase command:', command, parameters);\n    \n    // Mock responses for different commands\n    const responses: { [key: string]: any } = {\n      'analyze-market': {\n        marketSize: 'THB 2.5M annually',\n        competition: 'Moderate (15 competitors)',\n        opportunity: 'High demand for Thai fusion'\n      },\n      'competitor-analysis': {\n        topCompetitors: ['Thai Garden', 'Spice Route', 'Bangkok Bistro'],\n        avgRating: 4.2,\n        priceRange: '120-280 THB'\n      },\n      'location-analysis': {\n        footTraffic: 'High during lunch/dinner',\n        accessibility: 'Good public transport',\n        rent: 'THB 45,000/month average'\n      },\n      'financial-forecast': {\n        breakEven: '8 months',\n        roi: '25% annually',\n        revenue: 'THB 120,000/month estimated'\n      }\n    };\n\n    return responses[command] || { message: 'Command not recognized' };\n  }\n}\n\nexport const bitebaseApi = new BiteBaseAPI();"],"names":[],"mappings":"AAAA,gEAAgE;;;;;;;AA8BzD,MAAM;IACH,UAAU,yBAAyB;IAE3C,MAAM,cAAc,OAAwB,EAAmB;QAC7D,sBAAsB;QACtB,MAAM,YAAY,CAAC,QAAQ,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG,IAAI;QAEpF,oEAAoE;QACpE,QAAQ,GAAG,CAAC,+BAA+B;QAE3C,OAAO;IACT;IAEA,MAAM,kBAAkB,SAAiB,EAAiD;QACxF,iEAAiE;QACjE,OAAO;YACL,QAAQ;YACR,UAAU;QACZ;IACF;IAEA,MAAM,kBAAkB,SAAiB,EAAkC;QACzE,sBAAsB;QACtB,OAAO;YACL,IAAI;YACJ,WAAW,IAAI,OAAO,WAAW;YACjC,SAAS,CAAC;YACV,SAAS;gBACP,SAAS;oBAAE,WAAW;wBAAC;wBAAY;qBAAc;gBAAC;gBAClD,OAAO;oBAAE,iBAAiB;gBAAG;gBAC7B,OAAO;oBAAE,YAAY;gBAAM;gBAC3B,WAAW;oBAAE,WAAW;gBAAI;YAC9B;YACA,iBAAiB;gBACf;gBACA;aACD;YACD,YAAY;QACd;IACF;IAEA,8CAA8C;IAC9C,MAAM,eAAe,OAAe,EAAE,aAAkB,CAAC,CAAC,EAAgB;QACxE,QAAQ,GAAG,CAAC,+BAA+B,SAAS;QAEpD,wCAAwC;QACxC,MAAM,YAAoC;YACxC,kBAAkB;gBAChB,YAAY;gBACZ,aAAa;gBACb,aAAa;YACf;YACA,uBAAuB;gBACrB,gBAAgB;oBAAC;oBAAe;oBAAe;iBAAiB;gBAChE,WAAW;gBACX,YAAY;YACd;YACA,qBAAqB;gBACnB,aAAa;gBACb,eAAe;gBACf,MAAM;YACR;YACA,sBAAsB;gBACpB,WAAW;gBACX,KAAK;gBACL,SAAS;YACX;QACF;QAEA,OAAO,SAAS,CAAC,QAAQ,IAAI;YAAE,SAAS;QAAyB;IACnE;AACF;AAEO,MAAM,cAAc,IAAI","debugId":null}}]
}