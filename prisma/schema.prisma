// Enhanced Prisma schema for BiteBase AI SaaS
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enhanced User and session management
model User {
  id               String           @id @default(cuid())
  email            String           @unique
  name             String?
  avatar           String?
  role             UserRole         @default(USER)
  subscription     SubscriptionTier @default(FREE)
  onboardingComplete Boolean        @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  lastActiveAt     DateTime         @default(now())

  // Relations
  sessions         Session[]
  reports          MarketReport[]
  chatSessions     ChatSession[]
  collaborations   ReportCollaboration[]
  apiKeys          ApiKey[]
  usage            UsageRecord[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  ENTERPRISE
}

enum SubscriptionTier {
  FREE
  PRO
  ENTERPRISE
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  sessionId String   @unique
  data      Json?
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Enhanced Market research and reports
model MarketReport {
  id                String           @id @default(cuid())
  title             String
  description       String?
  region            String
  analysisType      AnalysisType
  status            ReportStatus     @default(PENDING)
  progress          Int              @default(0)
  
  // Enhanced Restaurant Parameters
  restaurantType    String?
  cuisineType       String?
  location          String?
  district          String?
  city              String           @default("Bangkok")
  budgetMin         Int?
  budgetMax         Int?
  targetCustomers   String[]
  businessModel     BusinessModel?
  
  // Analysis Results
  data              Json?
  productAnalysis   Json?
  placeAnalysis     Json?
  priceAnalysis     Json?
  promotionAnalysis Json?
  
  // Report Content
  insights          String[]
  recommendations   String[]
  executiveSummary  String?
  keyFindings       String[]
  riskAssessment    String[]
  nextSteps         String[]
  confidence        Int              @default(0)
  dataSources       String[]
  
  metadata          Json?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  publishedAt       DateTime?
  userId            String

  // Relations
  user                     User                            @relation(fields: [userId], references: [id], onDelete: Cascade)
  deliveryMarket           DeliveryMarketAnalysis[]
  customerBehavior         CustomerBehaviorAnalysis[]
  propertyMarket           PropertyMarketAnalysis[]
  accommodationDensity     AccommodationDensityAnalysis[]
  touristFlow              TouristFlowAnalysis[]
  collaborations           ReportCollaboration[]
  analysisSessions         AnalysisSession[]
  mapData                  MapData[]

  @@map("market_reports")
}

enum BusinessModel {
  DINE_IN
  DELIVERY
  TAKEAWAY
  HYBRID
}

// Analysis Sessions for tracking LangGraph workflows
model AnalysisSession {
  id                String           @id @default(cuid())
  sessionId         String           @unique
  workflowId        String?
  status            SessionStatus    @default(PENDING)
  currentNode       String?
  overallProgress   Int              @default(0)
  
  // Agent Progress
  agentProgress     Json             @default("{}")
  mcpServerStatus   Json             @default("{}")
  errors            Json             @default("[]")
  
  // Timing
  startedAt         DateTime         @default(now())
  completedAt       DateTime?
  estimatedDuration Int?             // in minutes
  
  // Relationships
  reportId          String
  report            MarketReport     @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  @@map("analysis_sessions")
}

enum SessionStatus {
  PENDING
  RUNNING
  PAUSED
  COMPLETED
  FAILED
  CANCELLED
}

model DeliveryMarketAnalysis {
  id            String   @id @default(cuid())
  reportId      String
  analysisType  String
  region        String
  businessType  String?
  orderVolume   String?
  data          Json
  insights      String[]
  recommendations String[]
  createdAt     DateTime @default(now())

  // Relations
  report MarketReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("delivery_market_analysis")
}

model CustomerBehaviorAnalysis {
  id               String   @id @default(cuid())
  reportId         String
  analysisType     String
  region           String
  customerSegment  String?
  cuisineType      String?
  timeframe        String
  behaviorData     Json
  insights         String[]
  recommendations  String[]
  createdAt        DateTime @default(now())

  // Relations
  report MarketReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("customer_behavior_analysis")
}

model PropertyMarketAnalysis {
  id           String   @id @default(cuid())
  reportId     String
  analysisType String
  propertyType String
  location     String
  region       String
  sizeRange    String?
  budget       String?
  data         Json
  insights     String[]
  recommendations String[]
  createdAt    DateTime @default(now())

  // Relations
  report MarketReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("property_market_analysis")
}

model AccommodationDensityAnalysis {
  id                 String   @id @default(cuid())
  reportId           String
  analysisType       String
  location           String
  region             String
  radius             Float?
  accommodationType  String?
  densityData        Json
  insights           String[]
  recommendations    String[]
  createdAt          DateTime @default(now())

  // Relations
  report MarketReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("accommodation_density_analysis")
}

model TouristFlowAnalysis {
  id          String   @id @default(cuid())
  reportId    String
  analysisType String
  location    String
  region      String
  timeframe   String
  visitorType String?
  flowData    Json
  insights    String[]
  recommendations String[]
  createdAt   DateTime @default(now())

  // Relations
  report MarketReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("tourist_flow_analysis")
}

// Enhanced Chat and conversation management
model ChatSession {
  id        String      @id @default(cuid())
  userId    String
  title     String?
  sessionId String      @unique
  reportId  String?     // Link to report if chat is part of analysis
  metadata  Json?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id            String      @id @default(cuid())
  sessionId     String
  role          MessageRole
  content       String
  messageType   MessageType @default(TEXT)
  metadata      Json?
  toolCalls     Json?
  attachments   Json?
  timestamp     DateTime    @default(now())

  // Relations
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

enum MessageType {
  TEXT
  SYSTEM
  ERROR
  COMPONENT
  CHART
  MAP
}

// Map and Geospatial Data
model MapData {
  id              String      @id @default(cuid())
  type            MapDataType
  title           String
  description     String?
  coordinates     Json        // GeoJSON
  properties      Json        @default("{}")
  style           Json        @default("{}")
  isVisible       Boolean     @default(true)
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relationships
  reportId        String
  report          MarketReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  @@map("map_data")
}

enum MapDataType {
  RESTAURANT
  COMPETITOR
  PROPERTY
  HEATMAP
  BOUNDARY
  ROUTE
}

// Collaboration
model ReportCollaboration {
  id              String              @id @default(cuid())
  role            CollaborationRole   @default(VIEWER)
  permissions     String[]
  invitedAt       DateTime            @default(now())
  acceptedAt      DateTime?
  
  // Relationships
  reportId        String
  report          MarketReport        @relation(fields: [reportId], references: [id], onDelete: Cascade)
  userId          String
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([reportId, userId])
  @@map("report_collaborations")
}

enum CollaborationRole {
  VIEWER
  EDITOR
  ADMIN
}

// API Keys and Usage
model ApiKey {
  id              String      @id @default(cuid())
  name            String
  key             String      @unique
  isActive        Boolean     @default(true)
  lastUsedAt      DateTime?
  createdAt       DateTime    @default(now())
  expiresAt       DateTime?
  
  // Relationships
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_keys")
}

model UsageRecord {
  id              String      @id @default(cuid())
  type            UsageType
  count           Int         @default(1)
  metadata        Json?
  timestamp       DateTime    @default(now())
  
  // Relationships
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("usage_records")
}

enum UsageType {
  REPORT_CREATED
  ANALYSIS_STARTED
  API_CALL
  EXPORT_GENERATED
  COLLABORATION_INVITED
}

// Deep agent system tracking
model AgentExecution {
  id          String            @id @default(cuid())
  sessionId   String?
  agentType   String
  task        String
  status      AgentStatus       @default(RUNNING)
  startTime   DateTime          @default(now())
  endTime     DateTime?
  duration    Int?
  result      Json?
  error       String?
  metadata    Json?

  @@map("agent_executions")
}

model AgentMetrics {
  id              String   @id @default(cuid())
  agentType       String
  operationType   String
  successCount    Int      @default(0)
  failureCount    Int      @default(0)
  averageDuration Float?
  lastExecution   DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([agentType, operationType])
  @@map("agent_metrics")
}

// Market data cache for performance
model MarketDataCache {
  id        String   @id @default(cuid())
  cacheKey  String   @unique
  data      Json
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("market_data_cache")
}

// Business intelligence data
model CompetitorData {
  id          String   @id @default(cuid())
  name        String
  location    Json     // {lat, lng, address}
  region      String
  cuisineType String[]
  priceRange  String
  rating      Float?
  reviewCount Int?
  data        Json     // Additional competitor metrics
  lastUpdated DateTime @default(now())

  @@map("competitor_data")
}

model MarketTrend {
  id         String   @id @default(cuid())
  region     String
  category   String
  trend      String
  value      Float
  unit       String?
  period     String
  source     String?
  confidence Float?
  createdAt  DateTime @default(now())

  @@map("market_trends")
}

// Enums
enum AnalysisType {
  DELIVERY_MARKET
  CUSTOMER_BEHAVIOR
  PROPERTY_MARKET
  ACCOMMODATION_DENSITY
  TOURIST_FLOW
  COMPETITOR_ANALYSIS
  MARKET_GAPS
  HOTSPOT_ANALYSIS
}

enum ReportStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  ARCHIVED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
  TOOL
}

enum AgentStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}
