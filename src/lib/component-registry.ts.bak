"use client";

import React from 'react';
import { Card, CardHeader, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { 
  MapPin, 
  BarChart3, 
  PieChart, 
  TrendingUp, 
  Navigation, 
  Clock,
  Users,
  Building2,
  Landmark,
  Route,
} from 'lucide-react';

export interface ComponentMetadata {
  id: string;
  name: string;
  description: string;
  category: 'widget' | 'panel' | 'control' | 'visualization';
  version: string;
  author: string;
  createdAt: Date;
  props?: Record<string, any>;
}

export interface RegisteredComponent {
  metadata: ComponentMetadata;
  component: React.ComponentType<any>;
}

export class ComponentRegistry {
  private components = new Map<string, RegisteredComponent>();
  private listeners = new Set<(components: Map<string, RegisteredComponent>) => void>();

  constructor() {
    this.registerBuiltInComponents();
  }

  private registerBuiltInComponents() {
    // Statistics Panel Component
    this.register({
      metadata: {
        id: 'stats-panel',
        name: 'Statistics Panel',
        description: 'Displays comprehensive map statistics and metrics',
        category: 'panel',
        version: '1.0.0',
        author: 'AI Assistant',
        createdAt: new Date(),
      },
      component: ({ mapState }: { mapState: any }) => (
        <Card className="w-full max-w-md">
          <CardHeader className="pb-3">
            <h3 className="font-semibold text-lg flex items-center gap-2">
              <BarChart3 className="h-5 w-5" />
              Map Statistics
            </h3>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">{mapState?.markers?.length || 0}</div>
                <div className="text-sm text-gray-600">Total Markers</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">{mapState?.zoom?.toFixed(1) || '12.0'}</div>
                <div className="text-sm text-gray-600">Zoom Level</div>
              </div>
            </div>
            
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Locations</span>
                <Badge variant="outline">{mapState?.markers?.filter((m: any) => m.type === 'location').length || 0}</Badge>
              </div>
              <div className="flex justify-between text-sm">
                <span>POIs</span>
                <Badge variant="outline">{mapState?.markers?.filter((m: any) => m.type === 'poi').length || 0}</Badge>
              </div>
              <div className="flex justify-between text-sm">
                <span>Businesses</span>
                <Badge variant="outline">{mapState?.markers?.filter((m: any) => m.type === 'business').length || 0}</Badge>
              </div>
            </div>
            
            <div className="pt-2">
              <div className="text-sm text-gray-600 mb-2">Map Coverage</div>
              <Progress value={Math.min(100, (mapState?.markers?.length || 0) * 10)} className="h-2" />
            </div>
          </CardContent>
        </Card>
      ),
    });

    // Marker Info Panel Component
    this.register({
      metadata: {
        id: 'marker-info-panel',
        name: 'Marker Info Panel',
        description: 'Shows detailed information about selected markers',
        category: 'panel',
        version: '1.0.0',
        author: 'AI Assistant',
        createdAt: new Date(),
      },
      component: ({ selectedMarker }: { selectedMarker: any }) => (
        <Card className="w-full max-w-sm">
          <CardHeader className="pb-3">
            <h3 className="font-semibold text-lg flex items-center gap-2">
              <MapPin className="h-5 w-5" />
              Marker Details
            </h3>
          </CardHeader>
          <CardContent>
            {selectedMarker ? (
              <div className="space-y-3">
                <div>
                  <div className="font-medium">{selectedMarker.title}</div>
                  <div className="text-sm text-gray-600">{selectedMarker.description || 'No description'}</div>
                </div>
                
                <div className="flex items-center gap-2">
                  {selectedMarker.type === 'location' && <MapPin className="h-4 w-4 text-blue-500" />}
                  {selectedMarker.type === 'poi' && <Landmark className="h-4 w-4 text-purple-500" />}
                  {selectedMarker.type === 'business' && <Building2 className="h-4 w-4 text-green-500" />}
                  {selectedMarker.type === 'route' && <Route className="h-4 w-4 text-orange-500" />}
                  <Badge variant="outline" className="capitalize">{selectedMarker.type}</Badge>
                </div>
                
                <div className="text-xs text-gray-500 space-y-1">
                  <div>Lat: {selectedMarker.position?.lat?.toFixed(6)}</div>
                  <div>Lng: {selectedMarker.position?.lng?.toFixed(6)}</div>
                </div>
                
                <div className="flex gap-2">
                  <Button size="sm" variant="outline" className="flex-1">Edit</Button>
                  <Button size="sm" variant="outline" className="flex-1">Delete</Button>
                </div>
              </div>
            ) : (
              <div className="text-center text-gray-500 py-8">
                <MapPin className="h-8 w-8 mx-auto mb-2 opacity-50" />
                <div className="text-sm">No marker selected</div>
              </div>
            )}
          </CardContent>
        </Card>
      ),
    });

    // Quick Actions Widget
    this.register({
      metadata: {
        id: 'quick-actions-widget',
        name: 'Quick Actions Widget',
        description: 'Provides quick access to common map actions',
        category: 'widget',
        version: '1.0.0',
        author: 'AI Assistant',
        createdAt: new Date(),
      },
      component: ({ onAction }: { onAction: (action: string) => void }) => (
        <Card className="w-full max-w-xs">
          <CardHeader className="pb-3">
            <h3 className="font-semibold flex items-center gap-2">
              <Zap className="h-4 w-4" />
              Quick Actions
            </h3>
          </CardHeader>
          <CardContent className="space-y-2">
            <Button 
              size="sm" 
              variant="outline" 
              className="w-full justify-start"
              onClick={() => onAction('add_coffee_shops')}
            >
              <Building2 className="h-4 w-4 mr-2" />
              Add Coffee Shops
            </Button>
            <Button 
              size="sm" 
              variant="outline" 
              className="w-full justify-start"
              onClick={() => onAction('analyze_data')}
            >
              <BarChart3 className="h-4 w-4 mr-2" />
              Analyze Data
            </Button>
            <Button 
              size="sm" 
              variant="outline" 
              className="w-full justify-start"
              onClick={() => onAction('clear_markers')}
            >
              <Trash2 className="h-4 w-4 mr-2" />
              Clear All
            </Button>
            <Button 
              size="sm" 
              variant="outline" 
              className="w-full justify-start"
              onClick={() => onAction('export_data')}
            >
              <Download className="h-4 w-4 mr-2" />
              Export Data
            </Button>
          </CardContent>
        </Card>
      ),
    });

    // Map Navigation Control
    this.register({
      metadata: {
        id: 'navigation-control',
        name: 'Navigation Control',
        description: 'Advanced navigation controls for the map',
        category: 'control',
        version: '1.0.0',
        author: 'AI Assistant',
        createdAt: new Date(),
      },
      component: ({ onNavigate }: { onNavigate: (action: string, params?: any) => void }) => (
        <Card className="w-full max-w-xs">
          <CardHeader className="pb-3">
            <h3 className="font-semibold flex items-center gap-2">
              <Navigation className="h-4 w-4" />
              Navigation
            </h3>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="grid grid-cols-3 gap-2">
              <Button size="sm" variant="outline" onClick={() => onNavigate('zoom_in')}>+</Button>
              <Button size="sm" variant="outline" onClick={() => onNavigate('reset_view')}>âŒ‚</Button>
              <Button size="sm" variant="outline" onClick={() => onNavigate('zoom_out')}>-</Button>
            </div>
            
            <div className="space-y-2">
              <Button 
                size="sm" 
                variant="outline" 
                className="w-full"
                onClick={() => onNavigate('go_to_city', { city: 'San Francisco' })}
              >
                San Francisco
              </Button>
              <Button 
                size="sm" 
                variant="outline" 
                className="w-full"
                onClick={() => onNavigate('go_to_city', { city: 'New York' })}
              >
                New York
              </Button>
              <Button 
                size="sm" 
                variant="outline" 
                className="w-full"
                onClick={() => onNavigate('go_to_city', { city: 'London' })}
              >
                London
              </Button>
            </div>
          </CardContent>
        </Card>
      ),
    });

    // Data Visualization Component
    this.register({
      metadata: {
        id: 'data-visualization',
        name: 'Data Visualization',
        description: 'Visual charts and graphs for map data',
        category: 'visualization',
        version: '1.0.0',
        author: 'AI Assistant',
        createdAt: new Date(),
      },
      component: ({ mapState }: { mapState: any }) => {
        const markerTypes = ['location', 'poi', 'business', 'route'];
        const typeCounts = markerTypes.map(type => 
          mapState?.markers?.filter((m: any) => m.type === type).length || 0
        );
        const total = typeCounts.reduce((sum, count) => sum + count, 0);

        return (
          <Card className="w-full max-w-md">
            <CardHeader className="pb-3">
              <h3 className="font-semibold flex items-center gap-2">
                <PieChart className="h-4 w-4" />
                Data Visualization
              </h3>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                {markerTypes.map((type, index) => {
                  const count = typeCounts[index];
                  const percentage = total > 0 ? (count / total) * 100 : 0;
                  
                  return (
                    <div key={type} className="space-y-1">
                      <div className="flex justify-between text-sm">
                        <span className="capitalize flex items-center gap-2">
                          {type === 'location' && <MapPin className="h-3 w-3 text-blue-500" />}
                          {type === 'poi' && <Landmark className="h-3 w-3 text-purple-500" />}
                          {type === 'business' && <Building2 className="h-3 w-3 text-green-500" />}
                          {type === 'route' && <Route className="h-3 w-3 text-orange-500" />}
                          {type}
                        </span>
                        <span>{count} ({percentage.toFixed(1)}%)</span>
                      </div>
                      <Progress value={percentage} className="h-2" />
                    </div>
                  );
                })}
              </div>
              
              <div className="pt-2 border-t">
                <div className="text-center">
                  <div className="text-lg font-semibold">{total}</div>
                  <div className="text-sm text-gray-600">Total Markers</div>
                </div>
              </div>
            </CardContent>
          </Card>
        );
      },
    });
  }

  public register(registeredComponent: RegisteredComponent): void {
    this.components.set(registeredComponent.metadata.id, registeredComponent);
    this.notifyListeners();
  }

  public unregister(id: string): boolean {
    const result = this.components.delete(id);
    if (result) {
      this.notifyListeners();
    }
    return result;
  }

  public get(id: string): RegisteredComponent | undefined {
    return this.components.get(id);
  }

  public getAll(): RegisteredComponent[] {
    return Array.from(this.components.values());
  }

  public getByCategory(category: ComponentMetadata['category']): RegisteredComponent[] {
    return this.getAll().filter(comp => comp.metadata.category === category);
  }

  public search(query: string): RegisteredComponent[] {
    const lowerQuery = query.toLowerCase();
    return this.getAll().filter(comp => 
      comp.metadata.name.toLowerCase().includes(lowerQuery) ||
      comp.metadata.description.toLowerCase().includes(lowerQuery)
    );
  }

  public generateComponent(description: string, props: Record<string, any> = {}): React.ComponentType<any> {
    // This is a simplified component generator
    // In a real implementation, this would use AI to generate more sophisticated components
    
    const componentId = `generated-${Date.now()}`;
    const componentName = `Generated Component`;
    
    const GeneratedComponent: React.ComponentType<any> = (componentProps) => {
      const combinedProps = { ...props, ...componentProps };
      
      return (
        <Card className="w-full max-w-sm">
          <CardHeader className="pb-3">
            <h3 className="font-semibold flex items-center gap-2">
              <Sparkles className="h-4 w-4" />
              {componentName}
            </h3>
            <p className="text-sm text-gray-600">{description}</p>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="text-sm">
                <strong>Generated from:</strong> "{description}"
              </div>
              
              {Object.keys(combinedProps).length > 0 && (
                <div className="text-xs bg-gray-50 p-2 rounded">
                  <strong>Props:</strong>
                  <pre className="mt-1 whitespace-pre-wrap">
                    {JSON.stringify(combinedProps, null, 2)}
                  </pre>
                </div>
              )}
              
              <div className="flex gap-2 pt-2">
                <Button size="sm" variant="outline" className="flex-1">
                  Action 1
                </Button>
                <Button size="sm" variant="outline" className="flex-1">
                  Action 2
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      );
    };

    // Register the generated component
    this.register({
      metadata: {
        id: componentId,
        name: componentName,
        description: `AI generated: ${description}`,
        category: 'widget',
        version: '1.0.0',
        author: 'AI Generator',
        createdAt: new Date(),
        props,
      },
      component: GeneratedComponent,
    });

    return GeneratedComponent;
  }

  public subscribe(listener: (components: Map<string, RegisteredComponent>) => void): () => void {
    this.listeners.add(listener);
    return () => {
      this.listeners.delete(listener);
    };
  }

  private notifyListeners(): void {
    this.listeners.forEach(listener => listener(this.components));
  }

  public exportRegistry(): string {
    const exportData = {
      components: this.getAll().map(comp => ({
        metadata: comp.metadata,
        // Note: We can't serialize the actual component functions
        componentSource: comp.component.toString(),
      })),
      exportedAt: new Date().toISOString(),
    };
    
    return JSON.stringify(exportData, null, 2);
  }

  public getStats(): {
    total: number;
    byCategory: Record<string, number>;
    byAuthor: Record<string, number>;
  } {
    const components = this.getAll();
    const byCategory: Record<string, number> = {};
    const byAuthor: Record<string, number> = {};

    components.forEach(comp => {
      byCategory[comp.metadata.category] = (byCategory[comp.metadata.category] || 0) + 1;
      byAuthor[comp.metadata.author] = (byAuthor[comp.metadata.author] || 0) + 1;
    });

    return {
      total: components.length,
      byCategory,
      byAuthor,
    };
  }
}

// Singleton instance
export const componentRegistry = new ComponentRegistry();